{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ImageRow","props","state","images","permute","bind","getRandomArbitrary","this","timerID","setInterval","clearInterval","min","max","Math","trunc","random","setState","length","first","second","temp","rowNum","className","map","pic","src","picture","large","alt","email","React","Component","Background","handleResize","e","width","window","innerWidth","height","innerHeight","url","picDim","pictures","picsPerRow","picsPerColumn","chunk","arr","chunkSize","row","i","len","push","slice","addEventListener","floor","pics_no","fetch","results","json","data","picRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98f5cdcf.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nclass ImageRow extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            images: props.images,\n        }\n\n        this.permute = this.permute.bind(this);\n        this.getRandomArbitrary = this.getRandomArbitrary.bind(this);\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.permute(),\n            5000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    getRandomArbitrary(min, max) {\n        return Math.trunc(Math.random() * (max - min) + min);\n    }\n\n    permute() {\n        this.setState(function(state, props) {\n            let images = props.images;\n            const ifChange = this.getRandomArbitrary(1, props.images.length);\n            if (ifChange % 2 === 0) {\n                const first = this.getRandomArbitrary(1, props.images.length);\n                const second = this.getRandomArbitrary(1, props.images.length);\n                const temp = images[first];\n                images[first] = images[second];\n                images[second] = temp;\n                return {\n                    images: images,\n                    rowNum: props.rowNum,\n                }\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"picrow\" key={this.state.rowNum}>\n            {this.state.images.map(pic => {\n                return (\n                    <img src={pic.picture.large} alt={pic.email} />\n                )\n            })}\n            </div>\n        )\n    }\n}\n\nclass Background extends React.Component {\n    constructor() {\n        super();\n        this.url = 'https://randomuser.me/api/?results=';\n        this.picDim = 128;\n        this.state = {\n            pictures: [],\n            width: window.innerWidth,\n            height: window.innerHeight,\n            picsPerRow: 0,\n            picsPerColumn: 0\n        };\n        this.chunk = this.chunk.bind(this);\n    }\n\n    handleResize = (e) => {\n        this.setState({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    };\n\n    chunk(arr, chunkSize) {\n        var row = [];\n        for (let i = 0, len = arr.length; i < len; i+=chunkSize) {\n            row.push(arr.slice(i, i+chunkSize));\n        }\n\n        return row;\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n\n        const picsPerRow =  Math.floor(window.innerWidth / this.picDim);\n        const picsPerColumn =  Math.floor((window.innerHeight - 140) / this.picDim);\n        const pics_no = (picsPerRow ) * picsPerColumn;\n        const url = this.url + pics_no;\n        fetch(url)\n            .then(results =>  {\n                return results.json();\n            }).then(data => {\n                let picRows = this.chunk(data.results, picsPerRow);\n                let pictures = picRows.map((picRow, i) => {\n                    return (\n                        <ImageRow key={i} images={picRow} rowNum={i}/>\n                    )\n                })\n                this.setState({pictures: pictures});\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"bg\">\n                {this.state.pictures}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Background />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}